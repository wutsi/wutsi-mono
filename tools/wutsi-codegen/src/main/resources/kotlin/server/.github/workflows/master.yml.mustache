{{#scope}}

name: master

on:
  push:
    branches:
      - master
    paths:
      - 'server/{{apiName}}-server/**'

jobs:
  build:

    runs-on: ubuntu-latest
{{#services}}
  {{#database}}
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: root
          POSTGRES_DB: {{databaseName}}
        ports:
          - 5432:5432
  {{/database}}
  {{#aws_postgres}}
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: root
          POSTGRES_DB: {{databaseName}}
        ports:
          - 5432:5432
  {{/aws_postgres}}
  {{#aws_mysql}}
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_USER: admin
          MYSQL_PASSWORD: admin
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: {{databaseName}}
        ports:
          - 3306:3306
  {{/aws_mysql}}
{{/services}}

    steps:
      - uses: actions/checkout@v3
      - name: JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: {{jdkVersion}}
      - name: Build
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          cd server/{{apiName}}-server
          mvn -Dspring.datasource.username=root -Dspring.datasource.password=root -q -s -X ../../settings.xml install

      - name: Upload app bundle
        uses: actions/upload-artifact@v3
        with:
          name: appbundle
          path: target/*.jar

  {{#herokuApp}}
  deploy-test:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - uses: actions/checkout@v3
      - name: JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
      - name: Get artigact
        uses: actions/download-artifact@v3
        with:
          name: appbundle

      - name: HerokuCLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          heroku plugins:install @heroku-cli/plugin-java

      - name: Heroku-Deploy-Test
        env:
          HEROKU_API_KEY: ${{secrets.HEROKU_API_KEY_TEST}}
          HEROKU_APP: {{herokuApp}}-test
        {{#services}}
          {{#apiKey}}
          API_KEY: ${{secrets.API_KEY_TEST}}
          {{/apiKey}}
          {{#mqueue}}
          CLOUDAMQP_URL: ${{secrets.CLOUDAMQP_URL_TEST}}
          {{/mqueue}}
          {{#aws}}
          AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY_TEST}}
          AWS_SECRET_KEY: ${{secrets.AWS_SECRET_KEY_TEST}}
          {{/aws}}
          {{#aws_postgres}}
          POSTGRES_USERNAME: ${{secrets.POSTGRES_USERNAME_TEST}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD_TEST}}
          POSTGRES_URL: ${{secrets.POSTGRES_URL_TEST}}
          {{/aws_postgres}}
          {{#aws_mysql}}
          MYSQL_USERNAME: ${{secrets.MYSQL_USERNAME_TEST}}
          MYSQL_PASSWORD: ${{secrets.MYSQL_PASSWORD_TEST}}
          MYSQL_URL: ${{secrets.MYSQL_URL_TEST}}
          {{/aws_mysql}}
          {{#slack}}
          LOG4J_SLACK_WEBHOOK_URL: ${{secrets.LOG4J_SLACK_WEBHOOK_URL_TEST}}
          {{/slack}}
          {{#messaging}}
          BITLY_ACCESS_TOKEN: ${{secrets.BITLY_ACCESS_TOKEN_TEST}}
          SMTP_USER: ${{secrets.SMTP_USER_TEST}}
          SMTP_PASSWORD: ${{secrets.SMTP_PASSWORD_TEST}}
          SMTP_HOST: ${{secrets.SMTP_HOST_TEST}}
          SMTP_PORT: ${{secrets.SMTP_PORT_TEST}}
          WHATSAPP_ACCESS_TOKEN: ${{secrets.WHATSAPP_ACCESS_TOKEN_TEST}}
          WHATSAPP_PHONE_ID: ${{secrets.WHATSAPP_PHONE_ID_TEST}}
          FIREBASE_CREDENTIALS: ${{secrets.FIREBASE_CREDENTIALS_TEST}}
          {{/messaging}}
        {{/services}}
        run: |
          heroku apps | grep ${HEROKU_APP} && echo 'app: ${HEROKU_APP} exists' ||  heroku apps:create ${HEROKU_APP}
          heroku buildpacks:clear --app ${HEROKU_APP}
          heroku buildpacks:add heroku/jvm --app ${HEROKU_APP}
          heroku config:set --app ${HEROKU_APP} APP_PROFILE=test
        {{#services}}
          {{#apiKey}}
          heroku config:set --app ${HEROKU_APP} API_KEY=${API_KEY}
          {{/apiKey}}
          {{#mqueue}}
          heroku config:set --app ${HEROKU_APP} CLOUDAMQP_URL=${CLOUDAMQP_URL}
          {{/mqueue}}
          {{#aws}}
          heroku config:set --app ${HEROKU_APP} AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
          heroku config:set --app ${HEROKU_APP} AWS_SECRET_KEY=${AWS_SECRET_KEY}
          {{/aws}}
          {{#aws_postgres}}
          heroku config:set --app ${HEROKU_APP} SPRING_DATABASE_USERNAME=${POSTGRES_USERNAME}
          heroku config:set --app ${HEROKU_APP} SPRING_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
          heroku config:set --app ${HEROKU_APP} SPRING_DATABASE_URL=${POSTGRES_URL}
          {{/aws_postgres}}
          {{#aws_mysql}}
          heroku config:set --app ${HEROKU_APP} SPRING_DATABASE_USERNAME=${MYSQL_USERNAME}
          heroku config:set --app ${HEROKU_APP} SPRING_DATABASE_PASSWORD=${MYSQL_PASSWORD}
          heroku config:set --app ${HEROKU_APP} SPRING_DATABASE_URL=${MYSQL_URL}
          {{/aws_mysql}}
          {{#slack}}
          heroku config:set --app ${HEROKU_APP} LOG4J_SLACK_WEBHOOK_URL=${LOG4J_SLACK_WEBHOOK_URL}
          {{/slack}}
          {{#messaging}}
          heroku config:set --app ${HEROKU_APP} BITLY_ACCESS_TOKEN=${BITLY_ACCESS_TOKEN}
          heroku config:set --app ${HEROKU_APP} SMTP_USER=${SMTP_USER}
          heroku config:set --app ${HEROKU_APP} SMTP_PASSWORD=${SMTP_PASSWORD}
          heroku config:set --app ${HEROKU_APP} SMTP_HOST=${SMTP_HOST}
          heroku config:set --app ${HEROKU_APP} SMTP_PORT=${SMTP_PORT}
          heroku config:set --app ${HEROKU_APP} WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN}
          heroku config:set --app ${HEROKU_APP} WHATSAPP_PHONE_ID=${WHATSAPP_PHONE_ID}
          heroku config:set --app ${HEROKU_APP} FIREBASE_CREDENTIALS="${FIREBASE_CREDENTIALS}"
          {{/messaging}}
        {{/services}}
        {{#herokuAddons}}
          heroku addons -a ${HEROKU_APP} | grep {{addonName}} && echo 'addon: {{addonName}} exists' ||  heroku addons:create {{addonName}} -a ${HEROKU_APP}
        {{/herokuAddons}}
          heroku deploy:jar {{artifactId}}.jar --app ${HEROKU_APP}

      - name: Health check
        env:
          HEROKU_APP: {{herokuApp}}-test
        run: |
          sleep 90
          curl -sSf https://${HEROKU_APP}.herokuapp.com/actuator/health >> /dev/null

    {{#services}}
      {{#slack}}
      - name: Notification
        uses: rtCamp/action-slack-notify@v2
        if: ${{ always() }}
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: {{herokuApp}}-test
          SLACK_MESSAGE: Heroku Deployment in TEST
          MSG_MINIMAL: true
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
      {{/slack}}
    {{/services}}



  deploy-prod:
    runs-on: ubuntu-latest
    needs: [ deploy-test ]
    steps:
      - uses: actions/checkout@v3
      - name: JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Get artigact
        uses: actions/download-artifact@v3
        with:
          name: appbundle

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          heroku plugins:install @heroku-cli/plugin-java

      - name: Heroku-Deploy-Prod
        env:
          HEROKU_API_KEY: ${{secrets.HEROKU_API_KEY_PROD}}
          HEROKU_APP: {{herokuApp}}-prod
        {{#services}}
          {{#apiKey}}
          API_KEY: ${{secrets.API_KEY_PROD}}
          {{/apiKey}}
          {{#mqueue}}
          CLOUDAMQP_URL: ${{secrets.CLOUDAMQP_URL_PROD}}
          {{/mqueue}}
          {{#aws}}
          AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY_PROD}}
          AWS_SECRET_KEY: ${{secrets.AWS_SECRET_KEY_PROD}}
          {{/aws}}
          {{#aws_postgres}}
          POSTGRES_USERNAME: ${{secrets.POSTGRES_USERNAME_PROD}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD_PROD}}
          POSTGRES_URL: ${{secrets.POSTGRES_URL_PROD}}
          {{/aws_postgres}}
          {{#aws_mysql}}
          MYSQL_USERNAME: ${{secrets.MYSQL_USERNAME_PROD}}
          MYSQL_PASSWORD: ${{secrets.MYSQL_PASSWORD_PROD}}
          MYSQL_URL: ${{secrets.MYSQL_URL_PROD}}
          {{/aws_mysql}}
          {{#slack}}
          LOG4J_SLACK_WEBHOOK_URL: ${{secrets.LOG4J_SLACK_WEBHOOK_URL_PROD}}
          {{/slack}}
          {{#messaging}}
          BITLY_ACCESS_TOKEN: ${{secrets.BITLY_ACCESS_TOKEN_PROD}}
          SMTP_USER: ${{secrets.SMTP_USER_PROD}}
          SMTP_PASSWORD: ${{secrets.SMTP_PASSWORD_PROD}}
          SMTP_HOST: ${{secrets.SMTP_HOST_PROD}}
          SMTP_PORT: ${{secrets.SMTP_PORT_PROD}}
          WHATSAPP_ACCESS_TOKEN: ${{secrets.WHATSAPP_ACCESS_TOKEN_PROD}}
          WHATSAPP_PHONE_ID: ${{secrets.WHATSAPP_PHONE_ID_PROD}}
          FIREBASE_CREDENTIALS: ${{secrets.FIREBASE_CREDENTIALS_PROD}}
          {{/messaging}}
        {{/services}}
        run: |
          heroku apps | grep ${HEROKU_APP} && echo 'app: ${HEROKU_APP} exists' ||  heroku apps:create ${HEROKU_APP}
          heroku buildpacks:clear --app ${HEROKU_APP}
          heroku buildpacks:add heroku/jvm --app ${HEROKU_APP}
          heroku config:set --app ${HEROKU_APP} APP_PROFILE=prod
        {{#services}}
          {{#apiKey}}
          heroku config:set --app ${HEROKU_APP} API_KEY=${API_KEY}
          {{/apiKey}}
          {{#mqueue}}
          heroku config:set --app ${HEROKU_APP} CLOUDAMQP_URL=${CLOUDAMQP_URL}
          {{/mqueue}}
          {{#aws}}
          heroku config:set --app ${HEROKU_APP} AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
          heroku config:set --app ${HEROKU_APP} AWS_SECRET_KEY=${AWS_SECRET_KEY}
          {{/aws}}
          {{#aws_postgres}}
          heroku config:set --app ${HEROKU_APP} SPRING_DATABASE_USERNAME=${POSTGRES_USERNAME}
          heroku config:set --app ${HEROKU_APP} SPRING_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
          heroku config:set --app ${HEROKU_APP} SPRING_DATABASE_URL=${POSTGRES_URL}
          {{/aws_postgres}}
          {{#aws_mysql}}
          heroku config:set --app ${HEROKU_APP} SPRING_DATABASE_USERNAME=${MYSQL_USERNAME}
          heroku config:set --app ${HEROKU_APP} SPRING_DATABASE_PASSWORD=${MYSQL_PASSWORD}
          heroku config:set --app ${HEROKU_APP} SPRING_DATABASE_URL=${MYSQL_URL}
          {{/aws_mysql}}
          {{#slack}}
          heroku config:set --app ${HEROKU_APP} LOG4J_SLACK_WEBHOOK_URL=${LOG4J_SLACK_WEBHOOK_URL}
          {{/slack}}
          {{#messaging}}
          heroku config:set --app ${HEROKU_APP} BITLY_ACCESS_TOKEN=${BITLY_ACCESS_TOKEN}
          heroku config:set --app ${HEROKU_APP} SMTP_USER=${SMTP_USER}
          heroku config:set --app ${HEROKU_APP} SMTP_PASSWORD=${SMTP_PASSWORD}
          heroku config:set --app ${HEROKU_APP} SMTP_HOST=${SMTP_HOST}
          heroku config:set --app ${HEROKU_APP} SMTP_PORT=${SMTP_PORT}
          heroku config:set --app ${HEROKU_APP} WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN}
          heroku config:set --app ${HEROKU_APP} WHATSAPP_PHONE_ID=${WHATSAPP_PHONE_ID}
          heroku config:set --app ${HEROKU_APP} FIREBASE_CREDENTIALS="${FIREBASE_CREDENTIALS}"
          {{/messaging}}
        {{/services}}
        {{#herokuAddons}}
          heroku addons -a ${HEROKU_APP} | grep {{addonName}} && echo 'addon: {{addonName}} exists' ||  heroku addons:create {{addonName}} -a ${HEROKU_APP}
        {{/herokuAddons}}
          heroku deploy:jar {{artifactId}}.jar --app ${HEROKU_APP}

      - name: Health check
        env:
          HEROKU_APP: {{herokuApp}}-prod
        run: |
          sleep 90
          curl -sSf https://${HEROKU_APP}.herokuapp.com/actuator/health >> /dev/null

    {{#services}}
      {{#slack}}
      - name: Notification
        uses: rtCamp/action-slack-notify@v2
        if: ${{ always() }}
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: {{herokuApp}}-prod
          SLACK_MESSAGE: Heroku Deployment in PROD
          MSG_MINIMAL: true
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
      {{/slack}}
    {{/services}}

  {{/herokuApp}}

  cleanup:
    runs-on: ubuntu-latest
    needs: [ deploy-test, deploy-prod ]
    if: ${{ always() }}
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: appbundle
{{/scope}}
