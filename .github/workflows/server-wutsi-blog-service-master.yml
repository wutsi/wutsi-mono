name: wutsi-blog-service

on:
    push:
        branches:
            - master
        paths:
            - 'server/wutsi-blog-service/**'
            - '.github/workflows/server-wutsi-blog-service-master.yml'

jobs:
    build:
        runs-on: ubuntu-latest

        services:
            mysql:
                image: mysql:9.0
                env:
                    MYSQL_USER: admin
                    MYSQL_PASSWORD: admin
                    MYSQL_ROOT_PASSWORD: root
                    MYSQL_DATABASE: wutsi
                ports:
                    - 3306:3306
            redis:
                image: redis
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            -   uses: actions/checkout@v4
            -   name: JDK
                uses: actions/setup-java@v4
                with:
                    distribution: 'zulu'
                    java-version: 17

            -   name: Prepare-EB-Deploy-Test
                env:
                    AMAZON_MQ_HOST: ${{secrets.AMAZON_MQ_HOST_PROD}}
                    AMAZON_MQ_USERNAME: ${{secrets.AMAZON_MQ_USERNAME_PROD}}
                    AMAZON_MQ_PASSWORD: ${{secrets.AMAZON_MQ_PASSWORD_PROD}}
                    AMAZON_REDIS_HOST: ${{secrets.AMAZON_REDIS_HOST_PROD}}
                    AMAZON_REDIS_PORT: ${{secrets.AMAZON_REDIS_PORT_PROD}}
                    AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY_PROD}}
                    AWS_SECRET_KEY: ${{secrets.AWS_SECRET_KEY_PROD}}
                    MYSQL_USERNAME: ${{secrets.MYSQL_USERNAME_BLOG_PROD}}
                    MYSQL_PASSWORD: ${{secrets.MYSQL_PASSWORD_BLOG_PROD}}
                    MYSQL_URL: ${{secrets.MYSQL_URL_BLOG_PROD}}
                    BITLY_ACCESS_TOKEN: ${{secrets.BITLY_ACCESS_TOKEN_PROD}}
                    SMTP_USER: ${{secrets.SMTP_USER_PROD}}
                    SMTP_PASSWORD: ${{secrets.SMTP_PASSWORD_PROD}}
                    SMTP_HOST: ${{secrets.SMTP_HOST_PROD}}
                    SMTP_PORT: ${{secrets.SMTP_PORT_PROD}}
                    PAYPAL_CLIENT_ID: ${{ secrets.PAYPAL_CLIENT_ID_PROD }}
                    PAYPAL_SECRET_KEY: ${{ secrets.PAYPAL_SECRET_KEY_PROD }}
                    GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY_PROD }}
                    FLUTTERWAVE_ENCRYPTION_KEY: ${{ secrets.FLUTTERWAVE_ENCRYPTION_KEY_PROD }}
                    FLUTTERWAVE_SECRET_HASH: ${{ secrets.FLUTTERWAVE_SECRET_HASH_PROD }}
                    FLUTTERWAVE_SECRET_KEY: ${{ secrets.FLUTTERWAVE_SECRET_KEY_PROD }}
                run: |
                    mkdir .ebextensions/
                    cp server/wutsi-blog-service/.ebextensions/* .ebextensions/.
                    sed -i 's/__SPRING_PROFILES_ACTIVE__/prod/g' .ebextensions/env.config
                    sed -i 's/__AWS_ACCESS_KEY__/'"$AWS_ACCESS_KEY"'/g' .ebextensions/env.config
                    sed -i 's/__AWS_SECRET_KEY__/'"$AWS_SECRET_KEY"'/g' .ebextensions/env.config
                    sed -i 's/__AMAZON_MQ_HOST__/'"$AMAZON_MQ_HOST"'/g' .ebextensions/env.config
                    sed -i 's/__AMAZON_MQ_USERNAME__/'"$AMAZON_MQ_USERNAME"'/g' .ebextensions/env.config
                    sed -i 's/__AMAZON_MQ_PASSWORD__/'"$AMAZON_MQ_PASSWORD"'/g' .ebextensions/env.config
                    sed -i 's/__AMAZON_REDIS_HOST__/'"$AMAZON_REDIS_HOST"'/g' .ebextensions/env.config
                    sed -i 's/__AMAZON_REDIS_PORT__/'"$AMAZON_REDIS_PORT"'/g' .ebextensions/env.config
                    #sed -i 's/__SPRING_DATABASE_USERNAME__/'"$MYSQL_USERNAME"'/g' .ebextensions/env.config
                    #sed -i 's/__SPRING_DATABASE_PASSWORD__/'"$MYSQL_PASSWORD"'/g' .ebextensions/env.config
                    #sed -i 's/__SPRING_DATABASE_URL__/'"$MYSQL_URL"'/g' .ebextensions/env.config
                    sed -i 's/__BITLY_ACCESS_TOKEN__/'"$BITLY_ACCESS_TOKEN"'/g' .ebextensions/env.config
                    #sed -i 's/__SMTP_USER__/'"$SMTP_USER"'/g' .ebextensions/env.config
                    #sed -i 's/__SMTP_PASSWORD__/'"$SMTP_PASSWORD"'/g' .ebextensions/env.config
                    #sed -i 's/__SMTP_HOST__/'"$SMTP_HOST"'/g' .ebextensions/env.config
                    #sed -i 's/__SMTP_PORT__/'"$SMTP_PORT"'/g' .ebextensions/env.config
                    #sed -i 's/__PAYPAL_CLIENT_ID__/'"$PAYPAL_CLIENT_ID"'/g' .ebextensions/env.config
                    #sed -i 's/__PAYPAL_SECRET_KEY__/'"$PAYPAL_SECRET_KEY"'/g' .ebextensions/env.config
                    #sed -i 's/__GOOGLE_GEMINI_API_KEY__/'"$GOOGLE_GEMINI_API_KEY"'/g' .ebextensions/env.config
                    #sed -i 's/__FLUTTERWAVE_ENCRYPTION_KEY__/'"$FLUTTERWAVE_ENCRYPTION_KEY"'/g' .ebextensions/env.config
                    #sed -i 's/__FLUTTERWAVE_SECRET_HASH__/'"$FLUTTERWAVE_SECRET_HASH"'/g' .ebextensions/env.config
                    #sed -i 's/__FLUTTERWAVE_SECRET_KEY__/'"$FLUTTERWAVE_SECRET_KEY"'/g' .ebextensions/env.config
                    zip deployment-${{ github.SHA }}.zip .ebextensions/env.config tracking-manager-server.jar

            -   name: Build
                env:
                    GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
                run: |
                    mvn -q -s settings.xml --non-recursive install
                    cd server/wutsi-blog-service
                    mvn -Dspring.datasource.username=root -Dspring.datasource.password=root -q -s ../../settings.xml install

            -   name: Upload app bundle
                uses: actions/upload-artifact@v4
                with:
                    name: appbundle
                    path: server/wutsi-blog-service/target/*.jar

    deploy-test:
        runs-on: ubuntu-latest
        needs: [ build ]
        steps:
            -   uses: actions/checkout@v4
            -   name: JDK
                uses: actions/setup-java@v4
                with:
                    distribution: 'zulu'
                    java-version: 17
            -   name: Get artifact
                uses: actions/download-artifact@v4
                with:
                    name: appbundle

            -   name: HerokuCLI
                run: |
                    curl https://cli-assets.heroku.com/install.sh | sh
                    heroku plugins:install @heroku-cli/plugin-java

            -   name: Heroku-Deploy-Test
                env:
                    HEROKU_API_KEY: ${{secrets.HEROKU_API_KEY_TEST}}
                    AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_TEST }}
                    AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY_TEST }}
                    HEROKU_APP: wutsi-blog-service-test
                    CLOUDAMQP_URL: ${{secrets.CLOUDAMQP_URL_TEST}}
                    AMAZON_MQ_HOST: ${{secrets.AMAZON_MQ_HOST_TEST}}
                    AMAZON_MQ_USERNAME: ${{secrets.AMAZON_MQ_USERNAME_TEST}}
                    AMAZON_MQ_PASSWORD: ${{secrets.AMAZON_MQ_PASSWORD_TEST}}
                    LOG4J_SLACK_WEBHOOK_URL: ${{secrets.LOG4J_SLACK_WEBHOOK_URL_TEST}}
                    MYSQL_USERNAME: ${{secrets.MYSQL_USERNAME_BLOG_TEST}}
                    MYSQL_PASSWORD: ${{secrets.MYSQL_PASSWORD_BLOG_TEST}}
                    MYSQL_URL: ${{secrets.MYSQL_URL_BLOG_TEST}}
                    BITLY_ACCESS_TOKEN: ${{secrets.BITLY_ACCESS_TOKEN_TEST}}
                    SMTP_USER: ${{secrets.SMTP_USER_TEST}}
                    SMTP_PASSWORD: ${{secrets.SMTP_PASSWORD_TEST}}
                    SMTP_HOST: ${{secrets.SMTP_HOST_TEST}}
                    SMTP_PORT: ${{secrets.SMTP_PORT_TEST}}
                    WUTSI_ML_DOMAIN_SUFFIX: ${{ secrets.HEROKU_DOMAIN_SUFFIX_WUTSI_ML_TEST }}
                    PAYPAL_CLIENT_ID: ${{ secrets.PAYPAL_CLIENT_ID_TEST }}
                    PAYPAL_SECRET_KEY: ${{ secrets.PAYPAL_SECRET_KEY_TEST }}
                    GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY_TEST }}
                run: |
                    heroku apps | grep ${HEROKU_APP} && echo 'app: ${HEROKU_APP} exists' ||  heroku apps:create ${HEROKU_APP}
                    heroku buildpacks:clear --app ${HEROKU_APP}
                    heroku buildpacks:add heroku/jvm --app ${HEROKU_APP}
                    heroku config:set --app ${HEROKU_APP} APP_PROFILE=test
                    heroku config:set --app ${HEROKU_APP} AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
                    heroku config:set --app ${HEROKU_APP} AWS_SECRET_KEY=${AWS_SECRET_KEY}
                    heroku config:set --app ${HEROKU_APP} CLOUDAMQP_URL=${CLOUDAMQP_URL}
                    heroku config:set --app ${HEROKU_APP} AMAZON_MQ_HOST=${AMAZON_MQ_HOST}
                    heroku config:set --app ${HEROKU_APP} AMAZON_MQ_USERNAME=${AMAZON_MQ_USERNAME}
                    heroku config:set --app ${HEROKU_APP} AMAZON_MQ_PASSWORD=${AMAZON_MQ_PASSWORD}
                    heroku config:set --app ${HEROKU_APP} SPRING_DATABASE_USERNAME=${MYSQL_USERNAME}
                    heroku config:set --app ${HEROKU_APP} SPRING_DATABASE_PASSWORD=${MYSQL_PASSWORD}
                    heroku config:set --app ${HEROKU_APP} SPRING_DATABASE_URL=${MYSQL_URL}
                    heroku config:set --app ${HEROKU_APP} BITLY_ACCESS_TOKEN=${BITLY_ACCESS_TOKEN}
                    heroku config:set --app ${HEROKU_APP} SMTP_USER=${SMTP_USER}
                    heroku config:set --app ${HEROKU_APP} SMTP_PASSWORD=${SMTP_PASSWORD}
                    heroku config:set --app ${HEROKU_APP} SMTP_HOST=${SMTP_HOST}
                    heroku config:set --app ${HEROKU_APP} SMTP_PORT=${SMTP_PORT}
                    heroku config:set --app ${HEROKU_APP} WUTSI_ML_DOMAIN_SUFFIX=${WUTSI_ML_DOMAIN_SUFFIX}
                    heroku config:set --app ${HEROKU_APP} PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
                    heroku config:set --app ${HEROKU_APP} PAYPAL_SECRET_KEY=${PAYPAL_SECRET_KEY}
                    heroku config:set --app ${HEROKU_APP} GOOGLE_GEMINI_API_KEY=${GOOGLE_GEMINI_API_KEY}
                    heroku addons -a ${HEROKU_APP} | grep papertrail && echo 'addon: papertrail exists' ||  heroku addons:create papertrail -a ${HEROKU_APP}
                    heroku addons -a ${HEROKU_APP} | grep memcachier && echo 'addon: memcachier exists' ||  heroku addons:create memcachier -a ${HEROKU_APP}
                    cp server/wutsi-ml-service/system.properties .
                    cp server/wutsi-blog-service/Procfile .
                    heroku deploy:jar wutsi-blog-service.jar --app ${HEROKU_APP}

            # DISABLING HEALTHCHECK ON TEST BECAUSE Flutterwave is failing
            #            -   name: Health check
            #                env:
            #                    HEROKU_APP: wutsi-blog-service-test
            #                run: |
            #                    sleep 30
            #                    curl -sSf https://${HEROKU_APP}.herokuapp.com/actuator/health >> /dev/null

            -   name: Notification
                uses: rtCamp/action-slack-notify@v2
                if: ${{always()}}
                env:
                    SLACK_COLOR: ${{job.status}}
                    SLACK_TITLE: wutsi-blog-service-test
                    SLACK_MESSAGE: Heroku Deployment in TEST
                    MSG_MINIMAL: true
                    SLACK_WEBHOOK: ${{secrets.LOG4J_SLACK_WEBHOOK_URL_TEST}}



    deploy-prod:
        runs-on: ubuntu-latest
        needs: [ deploy-test ]
        steps:
            -   uses: actions/checkout@v4
            -   name: JDK
                uses: actions/setup-java@v4
                with:
                    distribution: 'zulu'
                    java-version: 17

            -   name: Get artifact
                uses: actions/download-artifact@v4
                with:
                    name: appbundle

            #            -   name: Install Heroku CLI
            #                run: |
            #                    curl https://cli-assets.heroku.com/install.sh | sh
            #                    heroku plugins:install @heroku-cli/plugin-java
            #
            #            -   name: Heroku-Deploy-Prod
            #                env:
            #                    AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_PROD }}
            #                    AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY_PROD }}
            #                    HEROKU_API_KEY: ${{secrets.HEROKU_API_KEY_PROD}}
            #                    HEROKU_APP: wutsi-blog-service-prod
            #                    CLOUDAMQP_URL: ${{secrets.CLOUDAMQP_URL_PROD}}
            #                    AMAZON_MQ_HOST: ${{secrets.AMAZON_MQ_HOST_PROD}}
            #                    AMAZON_MQ_USERNAME: ${{secrets.AMAZON_MQ_USERNAME_PROD}}
            #                    AMAZON_MQ_PASSWORD: ${{secrets.AMAZON_MQ_PASSWORD_PROD}}
            #                    LOG4J_SLACK_WEBHOOK_URL: ${{secrets.LOG4J_SLACK_WEBHOOK_URL_PROD}}
            #                    MYSQL_USERNAME: ${{secrets.MYSQL_USERNAME_BLOG_PROD}}
            #                    MYSQL_PASSWORD: ${{secrets.MYSQL_PASSWORD_BLOG_PROD}}
            #                    MYSQL_URL: ${{secrets.MYSQL_URL_BLOG_PROD}}
            #                    BITLY_ACCESS_TOKEN: ${{secrets.BITLY_ACCESS_TOKEN_PROD}}
            #                    SMTP_USER: ${{secrets.SMTP_USER_PROD}}
            #                    SMTP_PASSWORD: ${{secrets.SMTP_PASSWORD_PROD}}
            #                    SMTP_HOST: ${{secrets.SMTP_HOST_PROD}}
            #                    SMTP_PORT: ${{secrets.SMTP_PORT_PROD}}
            #                    WUTSI_ML_DOMAIN_SUFFIX: ${{ secrets.HEROKU_DOMAIN_SUFFIX_WUTSI_ML_PROD }}
            #                    PAYPAL_CLIENT_ID: ${{ secrets.PAYPAL_CLIENT_ID_PROD }}
            #                    PAYPAL_SECRET_KEY: ${{ secrets.PAYPAL_SECRET_KEY_PROD }}
            #                    GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY_PROD }}
            #                run: |
            #                    heroku apps | grep ${HEROKU_APP} && echo 'app: ${HEROKU_APP} exists' ||  heroku apps:create ${HEROKU_APP}
            #                    heroku buildpacks:clear --app ${HEROKU_APP}
            #                    heroku buildpacks:add heroku/jvm --app ${HEROKU_APP}
            #                    heroku config:set --app ${HEROKU_APP} APP_PROFILE=prod
            #                    heroku config:set --app ${HEROKU_APP} AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
            #                    heroku config:set --app ${HEROKU_APP} AWS_SECRET_KEY=${AWS_SECRET_KEY}
            #                    heroku config:set --app ${HEROKU_APP} CLOUDAMQP_URL=${CLOUDAMQP_URL}
            #                    heroku config:set --app ${HEROKU_APP} AMAZON_MQ_HOST=${AMAZON_MQ_HOST}
            #                    heroku config:set --app ${HEROKU_APP} AMAZON_MQ_USERNAME=${AMAZON_MQ_USERNAME}
            #                    heroku config:set --app ${HEROKU_APP} AMAZON_MQ_PASSWORD=${AMAZON_MQ_PASSWORD}
            #                    heroku config:set --app ${HEROKU_APP} LOG4J_SLACK_WEBHOOK_URL=${LOG4J_SLACK_WEBHOOK_URL}
            #                    heroku config:set --app ${HEROKU_APP} SPRING_DATABASE_USERNAME=${MYSQL_USERNAME}
            #                    heroku config:set --app ${HEROKU_APP} SPRING_DATABASE_PASSWORD=${MYSQL_PASSWORD}
            #                    heroku config:set --app ${HEROKU_APP} SPRING_DATABASE_URL=${MYSQL_URL}
            #                    heroku config:set --app ${HEROKU_APP} BITLY_ACCESS_TOKEN=${BITLY_ACCESS_TOKEN}
            #                    heroku config:set --app ${HEROKU_APP} SMTP_USER=${SMTP_USER}
            #                    heroku config:set --app ${HEROKU_APP} SMTP_PASSWORD=${SMTP_PASSWORD}
            #                    heroku config:set --app ${HEROKU_APP} SMTP_HOST=${SMTP_HOST}
            #                    heroku config:set --app ${HEROKU_APP} SMTP_PORT=${SMTP_PORT}
            #                    heroku config:set --app ${HEROKU_APP} WUTSI_ML_DOMAIN_SUFFIX=${WUTSI_ML_DOMAIN_SUFFIX}
            #                    heroku config:set --app ${HEROKU_APP} PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
            #                    heroku config:set --app ${HEROKU_APP} PAYPAL_SECRET_KEY=${PAYPAL_SECRET_KEY}
            #                    heroku config:set --app ${HEROKU_APP} GOOGLE_GEMINI_API_KEY=${GOOGLE_GEMINI_API_KEY}
            #                    heroku addons -a ${HEROKU_APP} | grep papertrail && echo 'addon: papertrail exists' ||  heroku addons:create papertrail -a ${HEROKU_APP}
            #                    heroku addons -a ${HEROKU_APP} | grep memcachier && echo 'addon: memcachier exists' ||  heroku addons:create memcachier -a ${HEROKU_APP}
            #                    cp server/wutsi-ml-service/system.properties .
            #                    cp server/wutsi-blog-service/Procfile .
            #                    heroku deploy:jar wutsi-blog-service.jar --app ${HEROKU_APP}
            #
            #            -   name: Health check
            #                env:
            #                    HEROKU_APP: wutsi-blog-service-prod
            #                run: |
            #                    sleep 30
            #                    curl -sSf https://${HEROKU_APP}.herokuapp.com/actuator/health >> /dev/null

            -   name: Prepare-EB-Deploy
                env:
                    AMAZON_MQ_HOST: ${{secrets.AMAZON_MQ_HOST_PROD}}
                    AMAZON_MQ_USERNAME: ${{secrets.AMAZON_MQ_USERNAME_PROD}}
                    AMAZON_MQ_PASSWORD: ${{secrets.AMAZON_MQ_PASSWORD_PROD}}
                    AMAZON_REDIS_HOST: ${{secrets.AMAZON_REDIS_HOST_PROD}}
                    AMAZON_REDIS_PORT: ${{secrets.AMAZON_REDIS_PORT_PROD}}
                    AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY_PROD}}
                    AWS_SECRET_KEY: ${{secrets.AWS_SECRET_KEY_PROD}}
                    MYSQL_USERNAME: ${{secrets.MYSQL_USERNAME_BLOG_PROD}}
                    MYSQL_PASSWORD: ${{secrets.MYSQL_PASSWORD_BLOG_PROD}}
                    MYSQL_URL: ${{secrets.MYSQL_URL_BLOG_PROD}}
                    BITLY_ACCESS_TOKEN: ${{secrets.BITLY_ACCESS_TOKEN_PROD}}
                    SMTP_USER: ${{secrets.SMTP_USER_PROD}}
                    SMTP_PASSWORD: ${{secrets.SMTP_PASSWORD_PROD}}
                    SMTP_HOST: ${{secrets.SMTP_HOST_PROD}}
                    SMTP_PORT: ${{secrets.SMTP_PORT_PROD}}
                    PAYPAL_CLIENT_ID: ${{ secrets.PAYPAL_CLIENT_ID_PROD }}
                    PAYPAL_SECRET_KEY: ${{ secrets.PAYPAL_SECRET_KEY_PROD }}
                    GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY_PROD }}
                    FLUTTERWAVE_ENCRYPTION_KEY: ${{ secrets.FLUTTERWAVE_ENCRYPTION_KEY_PROD }}
                    FLUTTERWAVE_SECRET_HASH: ${{ secrets.FLUTTERWAVE_SECRET_HASH_PROD }}
                    FLUTTERWAVE_SECRET_KEY: ${{ secrets.FLUTTERWAVE_SECRET_KEY_PROD }}
                run: |
                    mkdir .ebextensions/
                    cp server/wutsi-blog-service/.ebextensions/* .ebextensions/.
                    sed -i 's/__SPRING_PROFILES_ACTIVE__/prod/g' .ebextensions/env.config
                    sed -i 's/__AWS_ACCESS_KEY__/'"$AWS_ACCESS_KEY"'/g' .ebextensions/env.config
                    sed -i 's/__AWS_SECRET_KEY__/'"$AWS_SECRET_KEY"'/g' .ebextensions/env.config
                    sed -i 's/__AMAZON_MQ_HOST__/'"$AMAZON_MQ_HOST"'/g' .ebextensions/env.config
                    sed -i 's/__AMAZON_MQ_USERNAME__/'"$AMAZON_MQ_USERNAME"'/g' .ebextensions/env.config
                    sed -i 's/__AMAZON_MQ_PASSWORD__/'"$AMAZON_MQ_PASSWORD"'/g' .ebextensions/env.config
                    sed -i 's/__AMAZON_REDIS_HOST__/'"$AMAZON_REDIS_HOST"'/g' .ebextensions/env.config
                    sed -i 's/__AMAZON_REDIS_PORT__/'"$AMAZON_REDIS_PORT"'/g' .ebextensions/env.config
                    sed -i 's/__SPRING_DATABASE_USERNAME__/'"$MYSQL_USERNAME"'/g' .ebextensions/env.config
                    sed -i 's/__SPRING_DATABASE_PASSWORD__/'"$MYSQL_PASSWORD"'/g' .ebextensions/env.config
                    sed -i 's/__SPRING_DATABASE_URL__/'"$MYSQL_URL"'/g' .ebextensions/env.config
                    #sed -i 's/__BITLY_ACCESS_TOKEN__/'"$BITLY_ACCESS_TOKEN"'/g' .ebextensions/env.config
                    #sed -i 's/__SMTP_USER__/'"$SMTP_USER"'/g' .ebextensions/env.config
                    #sed -i 's/__SMTP_PASSWORD__/'"$SMTP_PASSWORD"'/g' .ebextensions/env.config
                    #sed -i 's/__SMTP_HOST__/'"$SMTP_HOST"'/g' .ebextensions/env.config
                    #sed -i 's/__SMTP_PORT__/'"$SMTP_PORT"'/g' .ebextensions/env.config
                    #sed -i 's/__PAYPAL_CLIENT_ID__/'"$PAYPAL_CLIENT_ID"'/g' .ebextensions/env.config
                    #sed -i 's/__PAYPAL_SECRET_KEY__/'"$PAYPAL_SECRET_KEY"'/g' .ebextensions/env.config
                    #sed -i 's/__GOOGLE_GEMINI_API_KEY__/'"$GOOGLE_GEMINI_API_KEY"'/g' .ebextensions/env.config
                    #sed -i 's/__FLUTTERWAVE_ENCRYPTION_KEY__/'"$FLUTTERWAVE_ENCRYPTION_KEY"'/g' .ebextensions/env.config
                    #sed -i 's/__FLUTTERWAVE_SECRET_HASH__/'"$FLUTTERWAVE_SECRET_HASH"'/g' .ebextensions/env.config
                    #sed -i 's/__FLUTTERWAVE_SECRET_KEY__/'"$FLUTTERWAVE_SECRET_KEY"'/g' .ebextensions/env.config
                    zip deployment-${{ github.SHA }}.zip .ebextensions/env.config tracking-manager-server.jar

            -   name: EB-Deploy
                uses: einaregilsson/beanstalk-deploy@v22
                with:
                    aws_access_key: ${{ secrets.AWS_ACCESS_KEY_PROD }}
                    aws_secret_key: ${{ secrets.AWS_SECRET_KEY_PROD }}
                    application_name: wutsi-blog-service
                    environment_name: Wutsi-blog-service-env-01
                    version_label: ${{ github.SHA }}
                    region: us-east-1
                    deployment_package: deployment-${{ github.SHA }}.zip

            -   name: EB-Healthcheck
                env:
                    DOMAIN: http://wutsi-blog-service-env-01.eba-3yqfch7w.us-east-1.elasticbeanstalk.com/
                run: |
                    sleep 30
                    curl -sSf http://${DOMAIN}/actuator/health >> /dev/null


    cleanup:
        runs-on: ubuntu-latest
        needs: [ deploy-test, deploy-prod ]
        if: ${{always()}}
        steps:
            -   uses: geekyeggo/delete-artifact@v5
                with:
                    name: appbundle
